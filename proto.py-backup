#!/usr/bin/env python3

""" Hangman in Python 3.x with ncurses """

#import curses
import random
import re
import sys


def display_stage(stage):
    """ Display ASCII hangman """
    with open('hangmans/{}.txt'.format(stage), 'r') as hangman_stage:
        for line in hangman_stage:
            print(line)

def get_secret():
    """ Get secret word """
    with open('/usr/share/dict/words') as dictionary:
        word_list = dictionary.read().splitlines()
        secret = ''
        while len(secret) < 3 and secret[-2::] != 'ed':
            # Get random word from dictionary, remove "'s" pattern if present
            secret = word_list[random.randint(0, len(word_list)-1)].replace("'s", "")
        return secret

def unveil_secret(unveiled_secret, secret, guess):
    """ Unveil secret word as user guesses correctly """
    for idx, element in enumerate(secret):
        if secret[idx] == guess:
            unveiled_secret[idx] = guess

    return unveiled_secret

def main():
    """ Main loop """
    turn = 0
    max_chances = 6
    chances_left = max_chances
    secret = get_secret()
    consumed_secret = secret
    unveiled_secret = ['X' for it in range(len(secret))]
    used_guesses = []

    # Python 2|3 compatible
    if sys.version[0] == '2':
        user_input = raw_input
    elif sys.version[0] == '3':
        user_input = input

    while chances_left:
        print('Turn: {}. Chances left: {}. Guesses: {}'.format(turn+1, chances_left, used_guesses))

        guess = ''
        while len(guess) != 1:
            guess = user_input('Insert a char here...').lower()
            print('Tip: Insert 1 (ONE) character. ')

        if guess in used_guesses:
            used_guesses_str = ', '.join(character for character in used_guesses)
            print('You already tried that letter!')
            print('Tip: Already used guesses are: {}'.format(used_guesses_str))
        else:
            used_guesses += [guess]
            if guess in consumed_secret:
                pattern = r'[{}{}]'.format(guess.lower(), guess.upper())
                consumed_secret = re.sub(pattern, '', consumed_secret)
                unveiled_secret = unveil_secret(unveiled_secret, secret, guess)
            else:
                chances_left -= 1
        unveiled_secret_str = ''.join(elem for elem in unveiled_secret)
        print("Secret word: {}".format(unveiled_secret_str))
        turn += 1

        if not consumed_secret:
            print('Congrats! You won!')
            break
    print('The answer was {}.'.format(secret))

if __name__ == '__main__':
    main()
